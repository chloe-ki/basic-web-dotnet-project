// <auto-generated />
using Assignment3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assignment3.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250602102339_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assignment3.Models.Courses", b =>
                {
                    b.Property<string>("CourseID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Career")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Coordinator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreditPoints")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CourseID");

                    b.ToTable("Courses", null, t =>
                        {
                            t.HasCheckConstraint("CK_Course_Career", "Career IN ('Undergraduate', 'Postgraduate')");

                            t.HasCheckConstraint("CK_Course_Coordinator", "Coordinator LIKE '[A-Z]%' AND Coordinator NOT LIKE '%[^a-zA-Z ]%'");

                            t.HasCheckConstraint("CK_Course_CourseID", "CourseID LIKE 'COSC[0-9][0-9][0-9][0-9]'");
                        });
                });

            modelBuilder.Entity("Assignment3.Models.Enrolled", b =>
                {
                    b.Property<string>("CourseID")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("CourseID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrolled", (string)null);
                });

            modelBuilder.Entity("Assignment3.Models.Students", b =>
                {
                    b.Property<string>("StudentID")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StudentID");

                    b.ToTable("Students", null, t =>
                        {
                            t.HasCheckConstraint("CK_Student_Email", "Email LIKE '%@%'");

                            t.HasCheckConstraint("CK_Student_FirstName", "FirstName LIKE '[A-Z]%' AND FirstName NOT LIKE '%[^a-zA-Z]%'");

                            t.HasCheckConstraint("CK_Student_LastName", "LastName LIKE '[A-Z]%' AND LastName NOT LIKE '%[^a-zA-Z]%'");

                            t.HasCheckConstraint("CK_Student_MobilePhone", "MobilePhone LIKE '04[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'");

                            t.HasCheckConstraint("CK_Student_StudentID", "StudentID LIKE 's[0-9][0-9][0-9][0-9][0-9][0-9][0-9]'");
                        });
                });

            modelBuilder.Entity("Assignment3.Models.Enrolled", b =>
                {
                    b.HasOne("Assignment3.Models.Courses", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment3.Models.Students", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Assignment3.Models.Courses", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Assignment3.Models.Students", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
